/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BytesLike, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface EventAndErrorsInterface extends utils.Interface {
  functions: {};

  events: {
    "DepositAdded(address,uint256,address,uint256,uint256)": EventFragment;
    "DepositClosed(address,uint256)": EventFragment;
    "DepositWithdrawn(address,uint256,uint256)": EventFragment;
    "LockAdded(address,bytes32,uint256,uint256)": EventFragment;
    "LockReleased(address,bytes32)": EventFragment;
    "LockReturned(address,bytes32)": EventFragment;
    "PremiumsWithdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockReturned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumsWithdrawn"): EventFragment;
}

export interface DepositAddedEventObject {
  seller: string;
  depositID: BigNumber;
  token: string;
  premium: BigNumber;
  amount: BigNumber;
}
export type DepositAddedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber],
  DepositAddedEventObject
>;

export type DepositAddedEventFilter = TypedEventFilter<DepositAddedEvent>;

export interface DepositClosedEventObject {
  seller: string;
  depositID: BigNumber;
}
export type DepositClosedEvent = TypedEvent<
  [string, BigNumber],
  DepositClosedEventObject
>;

export type DepositClosedEventFilter = TypedEventFilter<DepositClosedEvent>;

export interface DepositWithdrawnEventObject {
  seller: string;
  depositID: BigNumber;
  amount: BigNumber;
}
export type DepositWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositWithdrawnEventObject
>;

export type DepositWithdrawnEventFilter =
  TypedEventFilter<DepositWithdrawnEvent>;

export interface LockAddedEventObject {
  buyer: string;
  lockID: string;
  depositID: BigNumber;
  amount: BigNumber;
}
export type LockAddedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LockAddedEventObject
>;

export type LockAddedEventFilter = TypedEventFilter<LockAddedEvent>;

export interface LockReleasedEventObject {
  buyer: string;
  lockId: string;
}
export type LockReleasedEvent = TypedEvent<
  [string, string],
  LockReleasedEventObject
>;

export type LockReleasedEventFilter = TypedEventFilter<LockReleasedEvent>;

export interface LockReturnedEventObject {
  buyer: string;
  lockId: string;
}
export type LockReturnedEvent = TypedEvent<
  [string, string],
  LockReturnedEventObject
>;

export type LockReturnedEventFilter = TypedEventFilter<LockReturnedEvent>;

export interface PremiumsWithdrawnEventObject {
  owner: string;
  amount: BigNumber;
}
export type PremiumsWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  PremiumsWithdrawnEventObject
>;

export type PremiumsWithdrawnEventFilter =
  TypedEventFilter<PremiumsWithdrawnEvent>;

export interface EventAndErrors extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventAndErrorsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "DepositAdded(address,uint256,address,uint256,uint256)"(
      seller?: PromiseOrValue<string> | null,
      depositID?: null,
      token?: null,
      premium?: null,
      amount?: null
    ): DepositAddedEventFilter;
    DepositAdded(
      seller?: PromiseOrValue<string> | null,
      depositID?: null,
      token?: null,
      premium?: null,
      amount?: null
    ): DepositAddedEventFilter;

    "DepositClosed(address,uint256)"(
      seller?: PromiseOrValue<string> | null,
      depositID?: null
    ): DepositClosedEventFilter;
    DepositClosed(
      seller?: PromiseOrValue<string> | null,
      depositID?: null
    ): DepositClosedEventFilter;

    "DepositWithdrawn(address,uint256,uint256)"(
      seller?: PromiseOrValue<string> | null,
      depositID?: null,
      amount?: null
    ): DepositWithdrawnEventFilter;
    DepositWithdrawn(
      seller?: PromiseOrValue<string> | null,
      depositID?: null,
      amount?: null
    ): DepositWithdrawnEventFilter;

    "LockAdded(address,bytes32,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      lockID?: PromiseOrValue<BytesLike> | null,
      depositID?: null,
      amount?: null
    ): LockAddedEventFilter;
    LockAdded(
      buyer?: PromiseOrValue<string> | null,
      lockID?: PromiseOrValue<BytesLike> | null,
      depositID?: null,
      amount?: null
    ): LockAddedEventFilter;

    "LockReleased(address,bytes32)"(
      buyer?: PromiseOrValue<string> | null,
      lockId?: null
    ): LockReleasedEventFilter;
    LockReleased(
      buyer?: PromiseOrValue<string> | null,
      lockId?: null
    ): LockReleasedEventFilter;

    "LockReturned(address,bytes32)"(
      buyer?: PromiseOrValue<string> | null,
      lockId?: null
    ): LockReturnedEventFilter;
    LockReturned(
      buyer?: PromiseOrValue<string> | null,
      lockId?: null
    ): LockReturnedEventFilter;

    "PremiumsWithdrawn(address,uint256)"(
      owner?: null,
      amount?: null
    ): PremiumsWithdrawnEventFilter;
    PremiumsWithdrawn(
      owner?: null,
      amount?: null
    ): PremiumsWithdrawnEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
